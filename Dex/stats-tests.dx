-- stats-tests.dx

import statsdraft

-- mainly cross-checking against results from R

-- bernoulli

log_pdf (Bernoulli 0.6) True ~~ -0.5108256

log_cdf (Bernoulli 0.6) False ~~ log 0.4

log_sf (Bernoulli 0.6) False ~~ log 0.6

quantile (Bernoulli 0.6) 0.39 == False

quantile (Bernoulli 0.6) 0.41 == True

rand_vec 5 (draw $ Bernoulli 0.6) (new_key 0) :: Fin 5=>Bool

-- binomial

log_pdf (Binomial 10 0.4) 8 ~~ -4.545315

log_cdf (Binomial 10 0.4) 7 ~~ -0.01237076

log_sf (Binomial 10 0.4) 7 ~~ -4.398599

quantile (Binomial 10 0.4) 0.5 == 4

rand_vec 5 (draw $ Binomial 10 0.4) (new_key 0) :: Fin 5=>Nat

-- exponential

log_pdf (Exponential 2.0) 3.0 ~~ -5.306853

log_cdf (Exponential 2.0) 3.0 ~~ -0.002481829

log_sf (Exponential 2.0) 3.0 ~~ -6

quantile (Exponential 2.0) 0.5 ~~ 0.3465736

rand_vec 5 (draw $ Exponential 2.0) (new_key 0) :: Fin 5=>Float

-- gaussian

log_pdf (Gaussian 1.0 2.0) 3.0 ~~ -2.112086

rand_vec 5 (draw $ Gaussian 1.0 2.0) (new_key 0) :: Fin 5=>Float

-- geometric

log_pdf (Geometric 0.1) 10 ~~ -3.25083

log_cdf (Geometric 0.1) 10 ~~ -0.4287518

log_sf (Geometric 0.1) 10 ~~ -1.053605

quantile (Geometric 0.1) 0.5 == 7

rand_vec 5 (draw $ Geometric 0.1) (new_key 0) :: Fin 5=>Nat

-- poisson

log_pdf (Poisson 5.0) 8 ~~ -2.7291

log_cdf (Poisson 5.0) 8 ~~ -0.07052294

log_sf (Poisson 5.0) 8 ~~ -2.686872

quantile (Poisson 5.0) 0.7 == 6

rand_vec 5 (draw $ Poisson 5.0) (new_key 0) :: Fin 5=>Nat

-- uniform

log_pdf (Uniform 2.0 5.0) 3.5 ~~ -1.098612

log_cdf (Uniform 2.0 5.0) 3.5 ~~ -0.6931472

log_sf (Uniform 2.0 5.0) 3.5 ~~ -0.6931472

quantile (Uniform 2.0 5.0) 0.2 ~~ 2.6

rand_vec 5 (draw $ Uniform 2.0 5.0) (new_key 0) :: Fin 5=>Float


-- data summaries

mean_and_var [2.0,3.0,4.0] ~~ (3,1)

mean [2.0,3.0,4.0] ~~ 3.0

var [1.0,3.0,5.0] ~~ 4.0

sd [1.0,3.0,5.0] ~~ 2.0

mean_and_cov [[1.0,2.0],[3.0,4.0],[5.0,6.0]] ~~ ([3,4], [[4,4],[4,4]])

mean [[1.0,2.0],[3.0,4.0],[5.0,6.0]] ~~ [3,4]

cov_mat [[1.0,2.0],[3.0,4.0],[5.0,6.0]] ~~ [[4,4],[4,4]]

cov [1.0,2.0,3.0] [2.0,3.0,4.0] ~~ 1

cov [1.0,2.0,3.0] [2.0,4.0,3.0] ~~ 0.5

cor [1.0,2.0,3.0] [2.0,4.0,3.0] ~~ 0.5

cov [1.0,2.0,3.0] [4.0,8.0,6.0] ~~ 1

cor [1.0,2.0,3.0] [4.0,8.0,6.0] ~~ 0.5


def my_draw {d a} [Dist d a] (dist: d) (k: Key) : a =
  draw dist k

my_draw (Geometric 0.1) (new_key 0) :: Nat



-- eof


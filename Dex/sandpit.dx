-- sandpit.dx
-- just messing around...

import djwutils

dat = unsafe_io do read_file "../pima.data"
(AsList _ tab) = parse_tsv ' ' dat
atab = map (cons "1.0") tab
att = map (list_to_tab (for i:(Fin 9). 1)) atab
xStr = map (\r. slice r 0 (Fin 8)) att
xmb = map (\r. map parseString r) xStr :: (Fin 200)=>(Fin 8)=>(Maybe Float)
x = map (\r. map from_just r) xmb :: (Fin 200)=>(Fin 8)=>Float
yStrM = map (\r. slice r 8 (Fin 1)) att
yStr = (transpose yStrM).(0@_)
y = map (\s. select (s == "Yes") 1.0 0.0) yStr
x
y


iterate 10 (\x. x*2) 1

unfold 10 (\a. (show a, a+1)) 0

last_dumb [1.0,2,3,6]
last [1.0,2,3,7]
length [1.0, 2, 3]

m = [[1.0,2,3],[4.4,5,6]]
to_tsv m

v = [1.0,2,3,4]

cons 1.5 (to_list v)

list2tab (to_list v) :: (Fin 4)=>Float


mx64 : Maybe Float64 = parseString "3.0"
mx64


map (\xi. clip (-5.0,5.0) xi) [1.0,2.0, 3, -1.0,10, -8.0]

clipv  [1.0,2.0, 3, -1.0,10, -8.0] 5.0


def randn2 (k:Key) : Float =
  [k1, k2] = split_key k
  u1 = 1.0 - (rand k1)
  u2 = rand k2
  sqrt ((-2.0) * log u1) * cos (2.0 * pi * u2)

def randn2_vec {n} [Ix n] (k:Key) : n=>Float =
  for i. randn2 (ixkey k i)

z: (Fin 100000000=>Float) = randn_vec (new_key 42)
maximum z
minimum z

-- eof
